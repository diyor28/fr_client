"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import json
import warnings

warnings.filterwarnings("ignore")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(v*r*z3v3va2&#djmbfq+jw=@*=k%4a=am(6385xwj!71b53+i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'server',
	'api',
	'rest_framework',
	'corsheaders'
]

MIDDLEWARE = [
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, "templates")],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

STATICFILES_DIRS = [
	os.path.join(BASE_DIR, 'static'),
]

FRONTEND_DIR = os.path.join(BASE_DIR, 'frontend')

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


class Config:
	type_hints = {
		"host_config": {
			"host_url": str,
			"base_api": str,
			"token": str,
			"retry": bool,
			"retry_time": int,
		},

		"params": {
			"detection_timeout": float,
			"user_timeout": float,
			"max_change": float,
			"detection_threshold": float,
			"recognition_threshold": float,
		},

		"weights": {
			"facenet": str,
			"detector": str,
			"detector_config": str,
			"generator": str,
			"gendernet": str
		}
	}

	def __init__(self):
		self.config_file = os.path.join(BASE_DIR, "config.json")
		with open(self.config_file, 'r') as JSON:
			self.config = json.load(JSON)

		self.assign()

	def _convert(self, data, type_hints):
		result = {}
		for key, converter in type_hints.items():
			value = data.get(key)
			if type(converter) == dict and value is not None:
				result[key] = self._convert(data[key], converter)
			elif value is not None:
				result[key] = converter(value)
		return result

	def convert(self, data):
		return self._convert(data, self.type_hints)

	def get_or_default(self, data, fields):
		if type(fields) == list and len(fields) >= 1:
			field = fields.pop(0)
			data = data.get(field)
			return self.get_or_default(data, fields)
		elif type(fields) == list:
			return data
		return data.get(fields, self.config[fields])

	def __assign(self, name, value):
		if type(value) == dict:
			for key, item in value.items():
				self.__assign(name + '_' + key, item)
		else:
			self.__setattr__(name, value)

	def _filter(self, data, type_hints):
		for key, value in data.items():
			assert key in type_hints
			if type(value) == dict:
				self._filter(data[key], type_hints[key])

	def filter(self, data):
		self._filter(data, self.type_hints)

	def assign(self):
		for key, value in self.config.items():
			self.__assign(key, value)

	def __update(self, data1, data2):
		for key, value in data2.items():
			if type(value) == dict:
				self.__update(data1[key], data2[key])
			else:
				data1[key] = value
		return data1

	def update(self, data):
		self.config = self.__update(self.config, data)

	def save(self, data=None):
		if data is not None:
			self.filter(data)
			data = self.convert(data)
			self.update(data)

		with open(self.config_file, 'w') as outfile:
			json.dump(self.config, outfile)

		return data


config = Config()
